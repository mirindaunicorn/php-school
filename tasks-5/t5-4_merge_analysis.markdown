**Анализ соритровки слиянием (merge sorting)**

Сложность алгоритма выбранной сортировки определена, как *O(n log n)*.

Особенность этого алгоритма - рекурсивное деление массива надвое, на подмассивы для сортировки,
пока в подмассивах для сортировки не будет по одному элементу.

Чтобы изобразить такой алгоритм действий в виде выражения предлагаю определить количество значений в первоначальном
массиве, как ***n***, а количество итераций пока не будет одного элемента в массиве, как ***t***.

На первом этапе итерации происходит ***n/2***, далее - ***n/4*** и до ***n/2^i***, пока ***n*** не станет равен **1**.

Для определения в данном случае количества итераций будет верно выражение ***1 = n/2^i***.

Для избавления от дробной части перемножаем обе стороны уравнения на ***2^i***, приходя к выражению ***2^i = n***.

Возвращаясь к текущей задаче (определить количество итераций - ***i***), приходим к следующему решению, что 
***i = log(n)*** (степень "2" упускается, как наиболее частоиспользуемая степень в логарифмических уравнениях).

Кроме рекурсивного деления и возвратного слияния, происходит и поэтапная сортировка элементов. Сложность сортировки на
каждом этапе будет составлять ***O(n)*** , так как если откинуть разделение и слияние массивов, при сортировке будет происходить
поочередный перебор элементов.

Итого, выходит, что количество сортировок ***O(n)*** равняется количеству итераций, выполняемых при делении массивов ***O(log n)*** .
Это значит, что общая сложность сортировки слиянием при худшем случае равняется: ***O(n log n)*** .

Чтобы определить, насколько лучше эти сортировка по сравнению с остальными, можно подставить количество элементов вместо ***n*** в соответствующие формулы сложности сортировок. 
Согласно подсчетам на больших значениях известно, что рассматриваемый ***O(n log n)*** выдает меньший результат, чем, например ***O(n^2)*** . Поэтому можно сделать вывод,что
сортировка слиянием работает быстрее, чем алгоритмы сложностью ***O(n^2)*** .
